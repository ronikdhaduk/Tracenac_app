class PartnerModelClass {  bool? status;  List<Msg>? msg;  Pagination? pagination;  PartnerModelClass({this.status, this.msg, this.pagination});  PartnerModelClass.fromJson(Map<String, dynamic> json) {    status = json['status'];    if (json['msg'] != null) {      msg = <Msg>[];      json['msg'].forEach((v) {        msg!.add(new Msg.fromJson(v));      });    }    pagination = json['pagination'] != null        ? new Pagination.fromJson(json['pagination'])        : null;  }  Map<String, dynamic> toJson() {    final Map<String, dynamic> data = new Map<String, dynamic>();    data['status'] = this.status;    if (this.msg != null) {      data['msg'] = this.msg!.map((v) => v.toJson()).toList();    }    if (this.pagination != null) {      data['pagination'] = this.pagination!.toJson();    }    return data;  }}class Msg {  String? sId;  String? partnerId;  String? tenantId;  String? partnerName;  String? partnerCategory;  String? city;  String? pincode;  String? partnerUserEmailId;  int? partnerAppUserPhoneNo;  String? country;  String? company;  String? lat;  String? long;  String? assignedPerson;  String? createdAt;  String? updatedAt;  int? iV;  Msg(      {this.sId,        this.partnerId,        this.tenantId,        this.partnerName,        this.partnerCategory,        this.city,        this.pincode,        this.partnerUserEmailId,        this.partnerAppUserPhoneNo,        this.country,        this.company,        this.lat,        this.long,        this.assignedPerson,        this.createdAt,        this.updatedAt,        this.iV});  Msg.fromJson(Map<String, dynamic> json) {    sId = json['_id'];    partnerId = json['partnerId'];    tenantId = json['tenantId'];    partnerName = json['partnerName'];    partnerCategory = json['partnerCategory'];    city = json['city'];    pincode = json['pincode'];    partnerUserEmailId = json['partnerUserEmailId'];    partnerAppUserPhoneNo = json['partnerAppUserPhoneNo'];    country = json['country'];    company = json['company'];    lat = json['lat'];    long = json['long'];    assignedPerson = json['assignedPerson'];    createdAt = json['createdAt'];    updatedAt = json['updatedAt'];    iV = json['__v'];  }  Map<String, dynamic> toJson() {    final Map<String, dynamic> data = new Map<String, dynamic>();    data['_id'] = this.sId;    data['partnerId'] = this.partnerId;    data['tenantId'] = this.tenantId;    data['partnerName'] = this.partnerName;    data['partnerCategory'] = this.partnerCategory;    data['city'] = this.city;    data['pincode'] = this.pincode;    data['partnerUserEmailId'] = this.partnerUserEmailId;    data['partnerAppUserPhoneNo'] = this.partnerAppUserPhoneNo;    data['country'] = this.country;    data['company'] = this.company;    data['lat'] = this.lat;    data['long'] = this.long;    data['assignedPerson'] = this.assignedPerson;    data['createdAt'] = this.createdAt;    data['updatedAt'] = this.updatedAt;    data['__v'] = this.iV;    return data;  }}class Pagination {  int? total;  int? page;  int? limit;  int? totalPages;  bool? hasNextPage;  bool? hasPrevPage;  Pagination(      {this.total,        this.page,        this.limit,        this.totalPages,        this.hasNextPage,        this.hasPrevPage});  Pagination.fromJson(Map<String, dynamic> json) {    total = json['total'];    page = json['page'];    limit = json['limit'];    totalPages = json['totalPages'];    hasNextPage = json['hasNextPage'];    hasPrevPage = json['hasPrevPage'];  }  Map<String, dynamic> toJson() {    final Map<String, dynamic> data = new Map<String, dynamic>();    data['total'] = this.total;    data['page'] = this.page;    data['limit'] = this.limit;    data['totalPages'] = this.totalPages;    data['hasNextPage'] = this.hasNextPage;    data['hasPrevPage'] = this.hasPrevPage;    return data;  }}