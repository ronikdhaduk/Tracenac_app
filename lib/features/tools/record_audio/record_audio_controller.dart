import 'dart:convert';import 'dart:developer';import 'package:file_picker/file_picker.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:http/http.dart' as http;import 'package:path/path.dart';import 'package:get/get.dart';import '../../../core/APIClass/APIClass.dart';import '../../../local_storage/local_storage.dart';import '../../assets/assets_model_class/assets_model_class.dart';import '../upload_file/model_class/asset_attachments_model_class.dart';import '../upload_file/model_class/upload_file_model_class.dart';class RecordAudioController extends GetxController{  RxBool isLoading = false.obs;  final APIClass _apiClass = APIClass();  List<String> attachmentsList = [];  UploadFileModelClass? uploadFileModelClass;  AssetAttachmentsModelClass? assetAttachmentsModelClass;  TextEditingController assetsIDController = TextEditingController();  TextEditingController descriptionController = TextEditingController();  void pickAndUploadAudio() async {    FilePickerResult? result = await FilePicker.platform.pickFiles(      type: FileType.custom,      allowedExtensions: ['mp3', 'wav', 'm4a'],    );    if (result != null) {      String filePath = result.files.single.path!;      isLoading(true);      uploadFileModelClass = await _apiClass.uploadAudioFile(filePath);      if(uploadFileModelClass?.success == true){        isLoading(false);        attachmentsList.assignAll(uploadFileModelClass?.urls ?? []);        log("attachmentsList===> $attachmentsList");        Get.snackbar("Success", "File uploaded", backgroundColor: Colors.white, colorText: Colors.black);        await assetAttachmentApi();      }else{        Get.snackbar("Failed", "Something Wrong?", backgroundColor: Colors.white, colorText: Colors.black);        isLoading(false);      }    } else {      print("User canceled file picker");    }  }  AssetsModelClass? assetsModelClass;  RxString? selectedAssetsName;  Future<void> getAssetsApi(text)async{    try {      isLoading(true);      assetsModelClass = await _apiClass.getTracenacAssetsApi(text);      if (assetsModelClass?.status == true) {      } else {        Get.snackbar(            "Failed", "Something Wrong?", backgroundColor: Colors.white,            colorText: Colors.black);      }    }catch (e){      isLoading(false);      log("getAssetsApi video controller==> $e");    }finally{      isLoading(false);    }  }  Future<void> assetAttachmentApi()async{    try {      isLoading(true);      Map<String, String> data = {        "tenantId": "${localStorage.read("tenantId")}",        "assetId": assetsIDController.text,        "description": descriptionController.text,        "attachments": jsonEncode(attachmentsList),      };      log("assetAttachmentApi pass data===> $data");      assetAttachmentsModelClass = await _apiClass.assetAttachmentsApi(data);      removeAllFiled();      isLoading(false);    }catch(e){      isLoading(false);    }finally{      isLoading(false);    }  }  void removeAllFiled(){    assetsIDController.text = "";    descriptionController.text = "";    attachmentsList.clear();  }  Future<void> uploadAudioFileWithHttp(String filePath) async {    var uri = Uri.parse("https://api.tracenac.com/api/assets/upload");    var request = http.MultipartRequest('POST', uri);    // Attach the audio file    request.files.add(await http.MultipartFile.fromPath(      'file',      filePath,      filename: basename(filePath),      // contentType: MediaType('audio', 'mpeg'), // or use correct content-type    ));    // Optional: Add headers    request.headers.addAll({      'Content-Type': 'multipart/form-data',      'Authorization': 'Bearer ${localStorage.read("access_token")}'    });    try {      var response = await request.send();      if (response.statusCode == 200) {        final respStr = await response.stream.bytesToString();        attachmentsList.assignAll(uploadFileModelClass?.urls ?? []);        log("attachmentsList===> $attachmentsList");        print("Upload successful: $respStr");      } else {        print("Upload failed: ${response.statusCode}");      }    } catch (e) {      print("Upload Error: $e");    }  }}