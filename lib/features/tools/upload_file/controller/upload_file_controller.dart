import 'dart:convert';import 'dart:developer';import 'package:flutter/material.dart';import 'package:get/get.dart';import 'package:get_storage/get_storage.dart';import 'package:image_picker/image_picker.dart';import 'package:tracenac/features/login/controller/login_controller.dart';import 'package:tracenac/features/tools/upload_file/model_class/asset_attachments_model_class.dart';import '../../../../core/APIClass/APIClass.dart';import '../../../assets/assets_model_class/assets_model_class.dart';import '../model_class/upload_file_model_class.dart';class UploadFileController extends GetxController{  final box = GetStorage();  final APIClass _apiClass = APIClass();  RxBool isLoading = false.obs;  XFile? imageFile;  List<XFile> imageFiles = [];  TextEditingController assetsIDController = TextEditingController();  TextEditingController descriptionController = TextEditingController();  UploadFileModelClass? uploadFileModelClass;  AssetAttachmentsModelClass? assetAttachmentsModelClass;  List<String> attachmentsList = [];  Future<void> uploadFile()async{    isLoading(true);    uploadFileModelClass = await _apiClass.uploadFileApi(imageFiles);    if(uploadFileModelClass?.success == true){      isLoading(false);      attachmentsList.assignAll(uploadFileModelClass?.urls ?? []);      log("attachmentsList===> $attachmentsList");      Get.snackbar("Success", "File uploaded", backgroundColor: Colors.white, colorText: Colors.black);      assetAttachmentApi();      imageFile  = null;    }else{      Get.snackbar("Failed", "Something Wrong?", backgroundColor: Colors.white, colorText: Colors.black);      isLoading(false);    }  }  AssetsModelClass? assetsModelClass;  RxString? selectedAssetsName;  Future<void> getAssetsApi(text)async{    try {      isLoading(true);      assetsModelClass = await _apiClass.getTracenacAssetsApi(text);      if (assetsModelClass?.status == true) {      } else {        Get.snackbar(            "Failed", "Something Wrong?", backgroundColor: Colors.white,            colorText: Colors.black);      }    }catch (e){      isLoading(false);      log("getAssetsApi video controller==> $e");    }finally{      isLoading(false);    }  }  void removeAllFiled(){    imageFile = null;    imageFiles.clear();    assetsIDController.text = "";    descriptionController.text = "";    attachmentsList.clear();  }  Future<void> assetAttachmentApi()async{    isLoading(true);    Map<String, String> data = {      "tenantId": "${localStorage.read("tenantId")}",      "assetId" : assetsIDController.text,      "description" : descriptionController.text,      "attachments" : jsonEncode(attachmentsList),    };    log("assetAttachmentApi pass data===> $data");    assetAttachmentsModelClass = await _apiClass.assetAttachmentsApi(data);    isLoading(false);  }  Future<void> pickMultipleImagesFromGallery() async {    final ImagePicker _picker = ImagePicker();    final List<XFile>? files = await _picker.pickMultiImage();    if (files != null && files.isNotEmpty) {      imageFiles.addAll(files);    }  }  Future<XFile?> pickImageFromGallery()async {    final ImagePicker _picker = ImagePicker() ;    final XFile? file = await _picker.pickImage(source: ImageSource.gallery) ;    if(file != null){      imageFile = file;    }    return file;  }  void save() {    isLoading(true);    final model = AssetData(      assetID: assetsIDController.text,      description: descriptionController.text,      imagePaths: imageFiles.map((e) => e.path).toList(),    );    log("model ==> $model");    box.write('asset_data_file_upload', model.toJson());    isLoading(false);    Get.snackbar(      "Success",      "Save as draft",      backgroundColor: Colors.white,      colorText: Colors.black,    );  }  void load() {    isLoading(true);    final data = box.read('asset_data_file_upload');    if (data != null) {      final model = AssetData.fromJson(data);      assetsIDController.text = model.assetID;      descriptionController.text = model.description;      imageFiles = model.imagePaths.map((e) => XFile(e)).toList();      log("model.assetID ==>${model.assetID}");      log("assetsIDController.text ==>${assetsIDController.text}");      log("model.description ==>${model.description}");      log("descriptionController.text ==>${descriptionController.text}");      log("model.imagePaths==> ${model.imagePaths}");      log("imageFiles.length ==>${imageFiles.length}");      log("imageFiles.first.name ==>${imageFiles.first.path}");      isLoading(false);    }    isLoading(false);  }}class AssetData {  String assetID;  String description;  List<String> imagePaths;  AssetData({required this.assetID, required this.description, required this.imagePaths});  Map<String, dynamic> toJson() => {    'assetID': assetID,    'description': description,    'images': imagePaths,  };  factory AssetData.fromJson(Map<String, dynamic> json) => AssetData(    assetID: json['assetID'] ?? '',    description: json['description'] ?? '',    imagePaths: List<String>.from(json['images'] ?? []),  );}