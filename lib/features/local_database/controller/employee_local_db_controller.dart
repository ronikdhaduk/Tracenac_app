import 'dart:convert';import 'package:get/get.dart';import 'package:get_storage/get_storage.dart' show GetStorage;import 'package:tracenac/features/local_database/models/employee_local_model_class.dart';class EmployeeLocalDbController extends GetxController{  final localDbStorage = GetStorage();  final dataList = <EmployeeLocalModelClass>[].obs;  List filteredList = <EmployeeLocalModelClass>[].obs;  final storageKey = 'employee_list';  @override  void onInit() {    // TODO: implement onInit    super.onInit();    // loadData();  }  Future<void> loadData() async {    final stored = localDbStorage.read(storageKey);    if (stored != null) {      final List decoded = jsonDecode(stored);      dataList.value = decoded.map((e) => EmployeeLocalModelClass.fromJson(e)).toList();    }  }  void filterEmployeeList(String query) {    if (query.isEmpty) {      filteredList = dataList;    } else {      filteredList = dataList.where((item) {        final empId = item.employeeID?.toLowerCase() ?? '';        final product = item.productName?.toLowerCase() ?? '';        return empId.contains(query.toLowerCase()) || product.contains(query.toLowerCase());      }).toList();    }    update();  }  void saveData() {    final encoded = jsonEncode(dataList.map((e) => e.toJson()).toList());    localDbStorage.write(storageKey, encoded);  }  void addLocalEmployeeDb(EmployeeLocalModelClass job) {    dataList.add(job);    saveData();  }  void updateLocalEmployeeDb(int index, EmployeeLocalModelClass job) {    dataList[index] = job;    saveData();  }  void updateLocalEmployeeByTitle(String title, EmployeeLocalModelClass updatedJob) {    final box = GetStorage();    // Load existing data    List<dynamic> rawList = box.read('employee_list') ?? [];    List<EmployeeLocalModelClass> dataList = rawList        .map((e) => EmployeeLocalModelClass.fromJson(e))        .toList();    // Find the item by title and update    int index = dataList.indexWhere((e) => e.employeeID == title);    if (index != -1) {      dataList[index] = updatedJob;      // Save updated list      box.write('employee_list', dataList.map((e) => e.toJson()).toList());    } else {      print("Item with title '$title' not found.");    }  }  void deleteEmployee(int index) {    dataList.removeAt(index);    saveData();  }}