import 'dart:convert';import 'dart:developer';import 'package:flutter/material.dart';import 'package:get/get.dart';import 'package:http/http.dart' as http;import 'package:image_picker/image_picker.dart';import 'package:tracenac/core/utils/app_color.dart';import '../../../core/APIClass/APIClass.dart';import '../../../core/services/network/network_api_services.dart';import '../../../core/utils/app_url.dart';import '../../../core/utils/image_picker_utils.dart';import '../../../local_storage/local_storage.dart';import '../../assets/assets_model_class/assets_model_class.dart';import '../../partner/model_class/PartnerModelClass.dart';class ReportTemplateController extends GetxController{  RxBool isLoading = false.obs;  final APIClass _apiClass = APIClass();  ImagePickerUtils? imagePickerUtils;  List reportList = [];  RxString dropDownValue = "Impairment Record".obs;  RxString selectedOption = ''.obs;  List fieldList = [];  XFile? imageFile;  List systemGeneratedFields = [];  List selectOptionList = [];  RxString reportID = "".obs;  RxString productImage = "".obs;  RxString assignTo = "".obs;  RxString reportName = "".obs;  RxString productType = "".obs;  RxnInt editIndex = RxnInt(); // âœ… nullable int observable  RxString employeeIndex = "".obs;  RxString partnerIndex = "".obs;  final assetIdText = "".obs;  TextEditingController firstAssetsIDController = TextEditingController();  TextEditingController productNameController = TextEditingController();  TextEditingController assetsNameController = TextEditingController();  TextEditingController assetsCodeController = TextEditingController();  TextEditingController assetsTypeController = TextEditingController();  TextEditingController assetsIDController = TextEditingController();  TextEditingController partnerIDController = TextEditingController();  TextEditingController partnerNameController = TextEditingController();  TextEditingController partnerCategoryController = TextEditingController();  TextEditingController partnerPinCodeController = TextEditingController();  final _api = NetworkApiServices();  void clearAllFieldController(){    imageFile = null;    firstAssetsIDController.clear();    productNameController.clear();    assetsNameController.clear();    assetsCodeController.clear();    assetsTypeController.clear();    assetsIDController.clear();    partnerIDController.clear();    partnerNameController.clear();    partnerCategoryController.clear();    partnerPinCodeController.clear();  }  Future reportTemplateApi() async {    isLoading(true);    final response = await _api.getApi(AppUrl.reportTemplate);    log("report Template response===> $response");    reportList.add(response);    log("Report List == > $reportList");    log("Report List name== > ${reportList.first[0]['name']}");    isLoading(false);  }  Future<XFile?> pickImageFromGallery()async {    final ImagePicker _picker = ImagePicker() ;    final XFile? file = await _picker.pickImage(source: ImageSource.gallery) ;    if(file != null){      imageFile = file;      productImage.value = imageFile!.path;    }    return file;  }  PartnerModelClass? partnerModelClass;  RxString? selectedPartnerName;  RxString? selectedAssetsName;  Future<void> getPartener(text)async{    // isLoading(true);    partnerModelClass = await _apiClass.getTracenacPartnerApi(text);    if(partnerModelClass?.status == true){    // log("partnerModelClassname==> ${partnerModelClass?.msg?.first.partnerName}");      isLoading(false);    }else{      Get.snackbar("Failed", "Something Wrong?", backgroundColor: Colors.white, colorText: Colors.black);      // isLoading(false);    }  }  AssetsModelClass? assetsModelClass;  Future<void> getAssetsApi(text)async{    assetsModelClass = await _apiClass.getTracenacAssetsApi(text);    if(assetsModelClass?.status == true){    }else{      Get.snackbar("Failed", "Something Wrong?", backgroundColor: Colors.white, colorText: Colors.black);    }  }  Future<void> createReport() async {    log("createReport api call...");    List<Map<String, dynamic>> reasonField = [      {        "name": "Product Name",        "value": productNameController.text,      },      {        "name": "Image Upload",        "value": productImage.value,      },      {        "name": "Product Type",        "value": productType.value,      },    ];    List<Map<String, dynamic>> systemField = [      {        "collection": "assets",        "values": {          "assetId": assetsIDController.text,          "assetName": assetsNameController.text,          "assetCode": assetsCodeController.text,          "assetType": assetsTypeController.text,        }      },      {        "collection": "partners",        "values": {          "partnerId": partnerIDController.text,          "partnerName": partnerNameController.text,          "partnerCategory": partnerCategoryController.text,          "city": "Jhansi",          "pincode": int.tryParse(partnerPinCodeController.text) ?? 0,        }      },    ];    Map<String, dynamic> data = {      "assetId": assetIdText.value,      // "date": "", // optional      // "latitude": null,      // "longitude": null,      "reportType": reportName.value,      // "attachments": [],      "assignedTo": assignTo.value,      "reasonFields": reasonField,      "systemFields": systemField,    };    log("data pass===> $data");    try {      isLoading(true);      final response = await http.post(        Uri.parse("https://api.tracenac.com/api/assets/create-asset-report"),        headers: {          "Content-Type": "application/json",          "Authorization": 'Bearer ${localStorage.read("access_token")}',        },        body: jsonEncode(data), // Convert Dart map to raw JSON      );      log("response.statusCode: ${response.statusCode}");      log("response.body: ${response.body}");      if (response.statusCode == 200 || response.statusCode == 201) {        isLoading(false);        Get.snackbar("Success", "Report Created", backgroundColor: Colors.white, colorText: AppColor.appBarColor);        Get.back();      } else {        throw Exception("Failed to create report: ${response.body}");      }    } catch (ex) {      log("createReport()===> Error: $ex");    } finally {      isLoading(false);    }  }}