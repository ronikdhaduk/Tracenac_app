import 'dart:developer';import 'package:flutter/material.dart';import 'package:get/get.dart';import 'package:tracenac/core/APIClass/APIClass.dart';import 'package:tracenac/core/utils/app_color.dart';import 'package:tracenac/features/create_report/create_report_screen/create_report_screen.dart';import 'package:tracenac/features/local_database/screen/local_data_screen.dart';import '../../create_report/create_report_screen/manual/manual_report_screen.dart';import '../../create_report/data/models/report_create.dart';import '../../partner/controller/partner_controller.dart';import '../../tracenac_get_user/controller/tracenac_get_user_conroller.dart';class SecondBottomScreen extends StatefulWidget {  const SecondBottomScreen({super.key});  @override  State<SecondBottomScreen> createState() => _SecondBottomScreenState();}class _SecondBottomScreenState extends State<SecondBottomScreen> with TickerProviderStateMixin {  late TabController _tabController;  final TracenacGetUserConroller userController = Get.put(TracenacGetUserConroller(),);  final PartnerController partnerController = Get.put(PartnerController());  TextEditingController userTextController = TextEditingController();  TextEditingController partnerTextController = TextEditingController();  @override  void initState() {    // TODO: implement initState    super.initState();    _tabController = TabController(length: 2, vsync: this);    fetchUer();    fetchPartner();  }  Future<void> fetchUer() async {    await userController.getUserTracenac("");    userController.allUsers = userController.tracenacUserModelClass?.msg ?? [];    userController.filteredUsers = userController.allUsers;  }  Future<void> fetchPartner() async {    await partnerController.getTracenacPartener('');    partnerController.allPartner =        partnerController.partnerModelClass?.msg ?? [];    partnerController.filteredPartner = partnerController.allPartner;  }  @override  void dispose() {    _tabController.dispose();    super.dispose();  }  @override  Widget build(BuildContext context) {    return SafeArea(      child: Scaffold(        appBar: AppBar(          automaticallyImplyLeading: false,          title: Text("Search", style: TextStyle(fontFamily: "Proxima",),),        ),        body: Padding(          padding: const EdgeInsets.all(16.0),          child: Column(            crossAxisAlignment: CrossAxisAlignment.start,            children: [              Padding(                padding: const EdgeInsets.symmetric(vertical: 4.0),                child: Container(                  height: Get.height * 0.06,                  width: Get.width,                  decoration: BoxDecoration(                    borderRadius: BorderRadius.circular(50),                    color: AppColor.appBarColor,                  ),                  child: TabBar(                    controller: _tabController,                    padding: EdgeInsets.all(2),                    dividerHeight: 0,                    unselectedLabelColor: Colors.white,                    // labelColor: Colors.white,                    labelColor: AppColor.appBarColor,                    indicator: BoxDecoration(                      borderRadius: BorderRadius.circular(50),                      // color: const Color.fromRGBO(0, 149, 117, 1),                      color: Colors.white,                    ),                    indicatorSize: TabBarIndicatorSize.tab,                    tabs: const [                      Padding(                        padding: EdgeInsets.symmetric(vertical: 8.0),                        child: Center(                          child: Text(                            "Employee",                            style: TextStyle(                              fontSize: 14,                              fontFamily: "Proxima",                              fontWeight: FontWeight.bold,                            ),                          ),                        ),                      ),                      Padding(                        padding: EdgeInsets.symmetric(vertical: 8.0),                        child: Center(                          child: Text(                            "Partner",                            style: TextStyle(                              fontSize: 14,                              fontFamily: "Proxima",                              fontWeight: FontWeight.bold,                            ),                          ),                        ),                      ),                    ],                  ),                ),              ),              Expanded(                child: TabBarView(                  controller: _tabController,                  children: [                    Obx(() {                      if (userController.isLoading.value) {                        return Center(child: CircularProgressIndicator());                      }                      return Padding(                        padding: const EdgeInsets.all(8.0),                        child: Column(                          children: [                            TextFormField(                              controller: userTextController,                              style: TextStyle(fontFamily: "Proxima", fontSize: 14),                              onChanged: (value) {                                if(_tabController.index == 0){                                  userController.filterUsers(value);                                  setState(() {});                                }else{                                  partnerController.filterPartnersFunc(value);                                  setState(() {});                                }                              },                              decoration: InputDecoration(                                suffixIcon: IconButton(                                  onPressed: () {                                    userTextController.clear();                                    userController.filterUsers("");                                    partnerController.filterPartnersFunc("");                                    setState(() {});                                  },                                  icon: Icon(                                    userTextController.text.isEmpty                                        ? Icons.search                                        : Icons.close,color: Colors.black,                                  ),                                ),                                contentPadding: EdgeInsets.symmetric(                                  vertical: 0,                                  horizontal: 20,                                ),                                enabledBorder: OutlineInputBorder(                                  borderRadius: BorderRadius.circular(100),                                ),                                focusedBorder: OutlineInputBorder(                                  borderRadius: BorderRadius.circular(100),                                  borderSide: BorderSide(                                    color: AppColor.appBarColor,                                  ),                                ),                              ),                            ),                            SizedBox(height: 20),                            // SizedBox(height: 10),                            userController.filteredUsers!.isEmpty                                ? Center(child: Text("User Not Found!", style: TextStyle(fontFamily: "Proxima",),))                                : ListView.builder(                                  itemCount:                                      userController.filteredUsers?.length ??                                      0,                                  shrinkWrap: true,                                  physics: NeverScrollableScrollPhysics(),                                  itemBuilder: (context, index) {                                    final user =                                        userController.filteredUsers![index];                                    return Column(                                      crossAxisAlignment:                                          CrossAxisAlignment.start,                                      children: [                                        InkWell(                                          onTap: () async {                                            await showDialog<void>(                                              context: context,                                              barrierDismissible: false,                                              // user must tap button!                                              builder: (                                                  BuildContext context,                                                  ) {                                                return AlertDialog(                                                  title: const Text(                                                    'Create Report',style:                                                  TextStyle(fontFamily: "Proxima",fontSize: 16),                                                  ),                                                  content: SingleChildScrollView(                                                    child: ListBody(                                                      children: <Widget>[                                                        Text('Are you sure you want to create a report for \n${user.name ?? ""}? ''\nID : ${user.id ?? ""}',style: TextStyle(fontFamily: "Proxima",fontSize: 14),                                                        ),                                                      ],                                                    ),                                                  ),                                                  actions: <Widget>[                                                    TextButton(                                                      child: const Text(                                                        'Dealer Report',                                                        style: TextStyle(                                                          fontFamily: "Proxima",                                                          color: Colors.blue,                                                        ),                                                      ),                                                      onPressed: () {                                                        // Navigator.of(context,).pop();                                                        Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => LocalDataScreen()));                                                        // Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => LocalDataStorage(partnerId:  data?.partnerId ?? "", partnerName: data?.partnerName ?? "",)));                                                      },                                                    ),                                                    TextButton(                                                      child: const Text                                                        ('No', style: TextStyle(fontFamily: "Proxima", color: Colors.red),),                                                      onPressed: () {                                                        Navigator.of(context,).pop();                                                      },                                                    ),                                                    TextButton(                                                      child: Text(                                                        'Yes',                                                        style: TextStyle                                                          (fontFamily: "Proxima", color: Colors.red),                                                      ),                                                      onPressed: () async {                                                        log("employee id===>${user.id}");                                                        Navigator.of(context,).pop();                                                        Get.to(()=> CreateReportScreen(employeeIndex: user.id.toString(), partnerIndex: "",));                                                        // Navigator.pushReplacement(context, MaterialPageRoute(                                                        //       builder: (context) => LoadingCreateReport(                                                        //         partnerId: data?.partnerId ?? "",                                                        //         creationType : data?.createdAt ?? "" ,                                                        //         partnerName: data?.partnerName ?? "",                                                        //       ),));                                                      },                                                    ),                                                  ],                                                );                                              },                                            );                                          },                                          child: Row(                                            children: [                                              Container(                                                height: 50,                                                width: 50,                                                decoration: BoxDecoration(                                                  color: Colors.blue,                                                  borderRadius:                                                      BorderRadius.circular(                                                        6,                                                      ),                                                ),                                                child: Center(                                                  child: Text(                                                    userController.tracenacUserModelClass?.msg?[index].name?[0] ?? "",                                                    style: TextStyle(fontFamily: "Proxima",),                                                  ),                                                ),                                              ),                                              SizedBox(width: 10),                                              Column(                                                crossAxisAlignment:                                                    CrossAxisAlignment.start,                                                children: [                                                  Text(                                                    user.name ?? "",                                                    style: TextStyle(                                                      fontWeight:                                                          FontWeight.bold,                                                      fontSize: 14,                                                      fontFamily: "Proxima",                                                    ),                                                  ),                                                  Text(user.email ?? "",                                                    style: TextStyle(fontFamily: "Proxima",),),                                                ],                                              ),                                            ],                                          ),                                        ),                                        SizedBox(height: 10,)                                      ],                                    );                                  },                                ),                          ],                        ),                      );                    }),                    Obx(() {                      if (partnerController.isLoading.value) {                        return Center(child: CircularProgressIndicator());                      }                      return Padding(                        padding: const EdgeInsets.all(8.0),                        child: Column(                          children: [                            TextFormField(                              controller: userTextController,                              style: TextStyle(fontFamily: "Proxima", fontSize: 14),                              onChanged: (value) {                                if(_tabController.index == 0){                                  userController.filterUsers(value);                                  setState(() {});                                }else{                                  partnerController.filterPartnersFunc(value);                                  setState(() {});                                }                              },                              decoration: InputDecoration(                                suffixIcon: IconButton(                                  onPressed: () {                                    userTextController.clear();                                    userController.filterUsers("");                                    partnerController.filterPartnersFunc("");                                    setState(() {});                                  },                                  icon: Icon(                                    userTextController.text.isEmpty                                        ? Icons.search                                        : Icons.close,color: Colors.black,                                  ),                                ),                                contentPadding: EdgeInsets.symmetric(                                  vertical: 0,                                  horizontal: 20,                                ),                                enabledBorder: OutlineInputBorder(                                  borderRadius: BorderRadius.circular(100),                                ),                                focusedBorder: OutlineInputBorder(                                  borderRadius: BorderRadius.circular(100),                                  borderSide: BorderSide(                                    color: AppColor.appBarColor,                                  ),                                ),                              ),                            ),                            SizedBox(height: 20),                            // SizedBox(height: 10),                            partnerController.filteredPartner!.isEmpty                                ? Center(child: Text("Partner Not Found!",                              style: TextStyle(fontFamily: "Proxima",),))                                : ListView.builder(                                  itemCount: partnerController.filteredPartner?.length ?? 0,                                  shrinkWrap: true,                                  physics: NeverScrollableScrollPhysics(),                                  itemBuilder: (context, index) {                                    final data = partnerController.filteredPartner?[index];                                    return Column(                                      crossAxisAlignment:                                          CrossAxisAlignment.start,                                      children: [                                        InkWell(                                          onTap: () async {                                            await showDialog<void>(                                              context: context,                                              barrierDismissible: false,                                              // user must tap button!                                              builder: (                                                BuildContext context,                                              ) {                                                return AlertDialog(                                                  title: const Text(                                                    'Create Report',style:                                                  TextStyle(fontFamily: "Proxima",fontSize: 16),                                                  ),                                                  content: SingleChildScrollView(                                                    child: ListBody(                                                      children: <Widget>[                                                        Text('Are you sure you want to create a report for \n${data?.partnerName ?? ""}? \nID : ${data?.partnerId ?? ""}',style: TextStyle(fontFamily: "Proxima",fontSize: 14),),                                                      ],                                                    ),                                                  ),                                                  actions: <Widget>[                                                    TextButton(                                                      child: const Text(                                                        'Dealer Report',                                                        style: TextStyle(                                                          color: Colors.blue,                                                          fontFamily: "Proxima",                                                        ),                                                      ),                                                      onPressed: () {                                                        Navigator                                                            .pushReplacement(context, MaterialPageRoute(builder: (context) => LocalDataScreen()));                                                        // Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => LocalDataStorage(partnerId:  data?.partnerId ?? "", partnerName: data?.partnerName ?? "",)));                                                      },                                                    ),                                                    TextButton(                                                      child: const Text                                                        ('No', style:                                                      TextStyle(color: Colors.red, fontFamily: "Proxima",),),                                                      onPressed: () {                                                        Navigator.of(                                                          context,                                                        ).pop();                                                      },                                                    ),                                                    TextButton(                                                      child: Text(                                                        'Yes',                                                        style: TextStyle                                                          (color: Colors.red, fontFamily: "Proxima",),                                                      ),                                                      onPressed: () async {                                                        log("My LogData ==> LoadingCreateReport ${data?.partnerId ?? ""}");                                                        log("My LogData ==> LoadingCreateReport ${data?.createdAt ?? ""}");                                                        log("My LogData ==> LoadingCreateReport ${data?.partnerName ?? ""}");                                                        Get.to(()=>                                                            CreateReportScreen(partnerIndex: data?.partnerId  ?? "",employeeIndex: "",));                                                        // Navigator.pushReplacement(context, MaterialPageRoute(                                                        //       builder: (context) => LoadingCreateReport(                                                        //         partnerId: data?.partnerId ?? "",                                                        //         creationType : data?.createdAt ?? "" ,                                                        //         partnerName: data?.partnerName ?? "",                                                        //       ),));                                                      },                                                    ),                                                  ],                                                );                                              },                                            );                                          },                                          child: Row(                                            children: [                                              Container(                                                height: 50,                                                width: 50,                                                decoration: BoxDecoration(                                                  color: Colors.blue,                                                  borderRadius:                                                      BorderRadius.circular(                                                        6,                                                      ),                                                ),                                                child: Center(                                                  child: Text(                                                    "${data?.partnerName?[0]}",                                                    style: TextStyle(fontFamily: "Proxima",),                                                  ),                                                ),                                              ),                                              SizedBox(width: 10),                                              Column(                                                crossAxisAlignment:                                                    CrossAxisAlignment.start,                                                children: [                                                  Text(                                                    " ${data?.partnerName}",                                                    style: TextStyle(                                                      fontWeight:                                                          FontWeight.bold,                                                      fontFamily: "Proxima",                                                      fontSize: 14,                                                    ),                                                  ),                                                  Text(                                                    " ${data?.partnerCategory}",                                                    style: TextStyle(fontFamily: "Proxima",),                                                  ),                                                ],                                              ),                                            ],                                          ),                                        ),                                        SizedBox(height: 10,)                                      ],                                    );                                  },                                ),                          ],                        ),                      );                    }),                  ],                ),              ),            ],          ),        ),      ),    );  }}class LoadingCreateReport extends StatefulWidget {  const LoadingCreateReport({super.key, required this.partnerId, required this.creationType, required this.partnerName});  final String partnerId;  final String creationType;  final String partnerName;  @override  State<LoadingCreateReport> createState() => _LoadingCreateReportState();}class _LoadingCreateReportState extends State<LoadingCreateReport> {  bool loading=true;  @override  void initState() {    createReport();    // TODO: implement initState    super.initState();  }  createReport() async {    try{      CreateReportModel createdReport = await APIClass().createReport(widget.partnerId);      log("My LogData ==> createdReportupdatedAt  ${createdReport}");      if (widget.creationType == 'scan') {        Navigator.pop(context);        // await Navigator.of(context).push(        //   MaterialPageRoute(        //     builder: (context) => QRViewScreen(        //       partnerName: widget.partnerName,        //       partnerId: widget.partnerId,        //       // reportId: createdReport.reportColId!,        //       reportId:"${createdReport.data?.report?.reportColId}",        //       reportDataItems: [],        //       creation: 'scan',        //     ),        //   ),        // );        // dealerCtr.clear();      } else {        // Create a blank report and get report ID        try {          Navigator.pop(context);          Navigator.of(context).push(            MaterialPageRoute(              builder: (context) => ListManualReport(                creation: '',                date: createdReport.data?.lastReport?.date,                partnerName: widget.partnerName,                partner: widget.partnerId,                // reportId: createdReport.reportColId!,                reportId:"${createdReport.data?.report?.reportColId}",                reportDataItems: [],              ),            ),          );          // dealerCtr.clear();        } catch (e) {          setState(() {            loading = false;          });          final snackBar = SnackBar(            content: Text(e.toString()),            action: SnackBarAction(              label: "error",              onPressed: () {                // Some code to undo the change.              },            ),          );          ScaffoldMessenger.of(context)              .showSnackBar(snackBar);        }      }    }catch(e){      setState(() {        loading = false;      });    }finally{      setState(() {        loading = false;      });    }  }  @override  Widget build(BuildContext context) {    return SafeArea(child: Scaffold(appBar: AppBar(),body: loading?Column(mainAxisAlignment: MainAxisAlignment.center,crossAxisAlignment: CrossAxisAlignment.center,children: [Center(child: CircularProgressIndicator()),Center(child: Text("Creatting a New Report Please Wait..,"))]):Container(),));  }}