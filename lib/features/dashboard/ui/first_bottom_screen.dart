import 'dart:developer';import 'package:flutter/material.dart';import 'package:flutter_expandable_fab/flutter_expandable_fab.dart';import 'package:get/get.dart';import 'package:tracenac/core/utils/app_color.dart';import 'package:tracenac/features/login/login_screen/login_screen.dart';import 'package:tracenac/features/tools/scanner/screen/scanner_screen.dart';import 'package:tracenac/local_storage/local_storage.dart';import '../../create_report/create_report_screen/create_report_screen.dart';import '../../menu/menu_controller/menu_controller.dart';import '../../menu_screen/asset_blocks_screen.dart';import '../../menu_screen/asset_categories_screen.dart';import '../../menu_screen/asset_components_screen.dart' show AssetComponentsScreen;import '../../menu_screen/asset_history_screen.dart' show AssetHistoryScreen;import '../../menu_screen/asset_labels_screen.dart' show AssetLabelsScreen;import '../../menu_screen/assets_screen.dart';import '../../menu_screen/barcode_scans_screen.dart' show BarcodeScansScreen;import '../../menu_screen/budgets_screen.dart' show BudgetsScreen;import '../../menu_screen/contracts_screen.dart' show ContractsScreen;import '../../menu_screen/cost_centres_screen.dart' show CostCentresScreen;import '../../menu_screen/departments_screen.dart';import '../../menu_screen/depreciation_records_screen.dart' show DepreciationRecordsScreen;import '../../menu_screen/documentation_screen.dart' show DocumentationScreen;import '../../menu_screen/forex_rates_screen.dart' show ForexRatesScreen;import '../../menu_screen/impairment_records_screen.dart' show ImpairmentRecordsScreen;import '../../menu_screen/leases_screen.dart' show LeasesScreen;import '../../menu_screen/locations_screen.dart';import '../../menu_screen/notifications_screen.dart' show NotificationsScreen;import '../../menu_screen/permissions_screen.dart';import '../../menu_screen/report_permissions_screen.dart' show ReportPermissionsScreen;import '../../menu_screen/reports_screen.dart' show ReportsScreen;import '../../menu_screen/shift_usage_screen.dart' show ShiftUsageScreen;import '../../menu_screen/tenants_screen.dart';import '../../menu_screen/wip_assets_screen.dart' show WipAssetsScreen;import '../../partner/screen/partner_screen.dart';import '../../tracenac_get_user/tracenac_get_user_screen/tracenac_get_user_screen.dart';class FirstBottomScreen extends StatefulWidget {  const FirstBottomScreen({super.key});  @override  State<FirstBottomScreen> createState() => _FirstBottomScreenState();}class _FirstBottomScreenState extends State<FirstBottomScreen> {  Map<String, IconData> componentIcons = {    "Dashboard": Icons.storefront,    "Tenants": Icons.shopping_bag,    "Users": Icons.list_alt_sharp,    "Roles": Icons.manage_accounts,    "Permissions": Icons.perm_device_info,    "Asset Categories": Icons.calendar_month,    "Asset Blocks": Icons.app_blocking,    "Departments" : Icons.developer_board_sharp,    "Locations" : Icons.location_on_sharp,    "Cost Centres" : Icons.currency_exchange,    "Assets" : Icons.web_asset_sharp,    "Asset Components" : Icons.assessment_sharp,    "Depreciation Records" : Icons.list,    "Asset History" : Icons.history,    "Contracts" : Icons.contrast,    "Budgets" : Icons.wallet,    "Forex Rates" : Icons.star_rate_sharp,    "Notifications" : Icons.notifications,    "Shift Usage" : Icons.data_usage,    "Reports" : Icons.report_sharp,    "Report Permissions" : Icons.perm_identity,    "Asset Labels" : Icons.label,    "Barcode Scans" : Icons.bar_chart,    "Impairment Records" : Icons.list_alt,    "Leases" : Icons.lan_rounded,    "WIP Assets" : Icons.wallet_sharp,    "Documentation" : Icons.my_library_books,  };  final DynamicMenuController controller = Get.put(DynamicMenuController());  @override  void initState() {    // TODO: implement initState    controller.dynamicMenuApi();    super.initState();  }  @override  Widget build(BuildContext context) {    return Scaffold(          appBar: AppBar(            title: Text("Menu", style: TextStyle(fontFamily: "Proxima",),),            automaticallyImplyLeading: false,            actions: [              IconButton(onPressed: () {                localStorage.erase();                Get.offAll(()=> LoginScreen());              }, icon: Icon(Icons.logout))            ],          ),          floatingActionButtonLocation: ExpandableFab.location,          floatingActionButton: ExpandableFab(            type: ExpandableFabType.up,            distance: 70,            overlayStyle: ExpandableFabOverlayStyle(              color: Colors.black.withOpacity(0.5),            ),            openButtonBuilder: RotateFloatingActionButtonBuilder(              child: const Icon(Icons.edit),              fabSize: ExpandableFabSize.regular,              foregroundColor: Colors.white,              backgroundColor: Colors.blue,              shape: const CircleBorder(),            ),            closeButtonBuilder: DefaultFloatingActionButtonBuilder(              child: const Icon(Icons.close),              fabSize: ExpandableFabSize.small,              foregroundColor: Colors.black.withOpacity(0.5),              backgroundColor: Colors.white,              shape: const CircleBorder(),            ),            children: [              Row(                children: [                  InkWell(                    onTap: (){                      Get.to(()=> CreateReportScreen(employeeIndex: "",));                    },                    child: Container(                      height: 40,                      width: 200,                      decoration: BoxDecoration(                        color: Colors.redAccent,                      ),                      child: Center(child: Text('Manual Report', style: TextStyle                        (color: Colors.white),),),                    ),                  ),                  SizedBox(width: 20),                  FloatingActionButton.small(                    heroTag: "manual_report_fab",                    backgroundColor: Colors.redAccent,                    child: const Icon(Icons.edit, color: Colors.white,),                    onPressed: (){                      print('Manual Report');                      Get.to(()=> CreateReportScreen(employeeIndex: "",));                    },                  ),                ],              ),              Row(                children: [                  InkWell(                    onTap: (){},                    child: Container(                      height: 40,                      width: 200,                      decoration: BoxDecoration(                        color: Colors.blue,                      ),                      child: Center(child: Text('Bulk Scan', style: TextStyle                        (color: Colors.white),),),                    ),                  ),                  SizedBox(width: 20),                  FloatingActionButton.small(                    heroTag: "bulk_scan_fab",                    backgroundColor: Colors.blue,                    child: const Icon(Icons.qr_code, color: Colors.white,),                    onPressed: () => print('Bulk Scan'),                  ),                ],              ),            ],          ),          body: Obx((){            if(controller.isLoading.value){              return Center(child: CircularProgressIndicator());            }            if(controller.menuList.isEmpty){              return Center(child: Text("No Menu Found!"),);            }            return Center(              child: Column(                children: [                  SizedBox(height: MediaQuery.of(context).padding.top),                  Expanded(                    child: GridView.builder(                      itemCount: controller.menuList.length ?? 0,                      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(                        crossAxisCount: 3,                        childAspectRatio: 0.8,                      ),                      itemBuilder: (context, index) {                        String? name = controller.menuList[index].name;                        bool? showMobile = controller.menuList[index].showMobile;                        log("showMobile{$index}===> $showMobile");                        IconData iconData = componentIcons[name] ?? Icons.help_outline; // default icon if not found                        return InkWell(                          onTap: () {                            if (name == "Dashboard" && showMobile == true) {                              Get.to(()=> CreateReportScreen(employeeIndex: "",));                            }                            if (name == "Tenants" && showMobile == true) {                              // Get.to(()=> UploadFileScreen());                              Get.to(()=> TenantsScreen());                            }                            if (name == "Users" && showMobile == true) {                              Get.to(()=> TracenacGetUserScreen());                            }                            if (name == "Roles" && showMobile == true) {                              Get.to(()=> PartnerScreen());                            }                            if (name == "Permissions" && showMobile == true) {                              // Get.to(()=> QRScannerScreen());                              Get.to(()=> PermissionsScreen());                            }                            if(name == "Asset Categories" && showMobile == true){                              Get.to(()=> AssetCategoriesScreen());                            }                            if(name == "Asset Blocks" && showMobile == true){                              Get.to(()=> AssetBlocksScreen());                            }                            if(name == "Departments" && showMobile == true){                              Get.to(()=> DepartmentsScreen());                            }                            if(name == "Locations" && showMobile == true){                              Get.to(()=> LocationsScreen());                            }                            if(name == "Cost Centres" && showMobile == true){                              Get.to(()=> CostCentresScreen());                            }                            if(name == "Assets" && showMobile == true){                              Get.to(()=> AssetsScreen());                            }                            if(name == "Asset Components" && showMobile == true){                              Get.to(()=> AssetComponentsScreen());                            }                            if(name == "Depreciation Records" && showMobile == true){                              Get.to(()=> DepreciationRecordsScreen());                            }                            if(name == "Asset History" && showMobile == true){                              Get.to(()=> AssetHistoryScreen());                            }                            if(name == "Contracts" && showMobile == true){                              Get.to(()=> ContractsScreen());                            }                            if(name == "Budgets" && showMobile == true){                              Get.to(()=> BudgetsScreen());                            }                            if(name == "Forex Rates" && showMobile == true){                              Get.to(()=> ForexRatesScreen());                            }                            if(name == "Notifications" && showMobile == true){                              Get.to(()=> NotificationsScreen());                            }                            if(name == "Shift Usage" && showMobile == true){                              Get.to(()=> ShiftUsageScreen());                            }                            if(name == "Reports" && showMobile == true){                              Get.to(()=> ReportsScreen());                            }                            if(name == "Report Permissions" && showMobile == true){                              Get.to(()=> ReportPermissionsScreen());                            }                            if(name == "Asset Labels" && showMobile == true){                              Get.to(()=> AssetLabelsScreen());                            }                            if(name == "Barcode Scans" && showMobile == true){                              // Get.to(()=> BarcodeScansScreen());                              Get.to(()=> QRScannerScreen());                            }                            if(name == "Impairment Records" && showMobile == true){                              Get.to(()=> ImpairmentRecordsScreen());                            }                            if(name == "Leases" && showMobile == true){                              Get.to(()=> LeasesScreen());                            }                            if(name == "WIP Assets" && showMobile == true){                              Get.to(()=> WipAssetsScreen());                            }                            if(name == "Documentation" && showMobile == true){                              Get.to(()=> DocumentationScreen());                            }                          },                          child: showMobile == false ? null : Container(                            height: 100,                            margin: EdgeInsets.all(8.0),                            padding: EdgeInsets.all(8.0),                            width: double.infinity,                            decoration: BoxDecoration(                              borderRadius: BorderRadius.circular(12),                              border: Border.all(color: Colors.grey.shade500),                            ),                            child: Column(                              mainAxisAlignment: MainAxisAlignment.center,                              crossAxisAlignment: CrossAxisAlignment.center,                              children: [                                Icon(                                  iconData,                                  color: AppColor.buttonColor,                                  size: 40,                                ),                                SizedBox(height: 10),                                Text(                                  name ?? "",                                  maxLines: 3,                                  overflow: TextOverflow.ellipsis,                                  style: TextStyle(fontFamily: "Proxima", fontSize: 14),                                  textAlign: TextAlign.center,                                ),                              ],                            ),                          ),                        );                      },                    ),                  ),                ],              ),            );          }),        );  }}