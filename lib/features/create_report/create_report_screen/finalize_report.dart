import 'dart:convert';import 'dart:developer';import 'dart:typed_data';import 'dart:ui' as ui;import 'package:flutter/material.dart';import 'package:get/get.dart';import 'package:get_storage/get_storage.dart';import 'package:hand_signature/signature.dart';import 'package:tracenac/core/utils/app_color.dart';import 'package:tracenac/features/local_database/controller/employee_local_db_controller.dart';import 'package:tracenac/features/local_database/controller/partner_local_db_controller.dart';import 'package:tracenac/features/local_database/models/employee_local_model_class.dart';import 'package:tracenac/features/local_database/models/partner_local_model_class.dart' show PartnerLocalModelClass;import 'package:tracenac/features/report_template/controller/report_template_controller.dart';import 'package:tracenac/features/tracenac_get_user/controller/tracenac_get_user_conroller.dart';class FinalizeReport extends StatefulWidget {  const FinalizeReport({super.key});  @override  State<FinalizeReport> createState() => _FinalizeReportState();}class _FinalizeReportState extends State<FinalizeReport> with SingleTickerProviderStateMixin{  late TabController _tabController;  HandSignatureControl control = HandSignatureControl(    threshold: 0.01,    smoothRatio: 0.65,    velocityRange: 2.0,  );  Uint8List? _signaturePreview;  final ReportTemplateController controller = Get.put(ReportTemplateController(),);  final TracenacGetUserConroller userController = Get.put(TracenacGetUserConroller(),);  final PartnerLocalDbController localDbController = Get.put(PartnerLocalDbController(),);  final GlobalKey _signatureKey = GlobalKey();  final box = GetStorage();  final EmployeeLocalDbController employeeLocalDbController = Get.put(EmployeeLocalDbController(),);  @override  void initState() {    // TODO: implement initState    super.initState();    _tabController = TabController(length: 2, vsync: this);  }  @override  Widget build(BuildContext context) {    return Scaffold(      body: Padding(        padding: const EdgeInsets.all(16.0),        child: Column(          crossAxisAlignment: CrossAxisAlignment.start,          children: [            const SizedBox(height: 4),            Padding(              padding: const EdgeInsets.symmetric(vertical: 8.0),              child: Container(                height: Get.height * 0.06,                width: Get.width,                decoration: BoxDecoration(                  borderRadius: BorderRadius.circular(50),                  // color: const Color.fromRGBO(0, 149, 117, 0.2),                  color: Colors.blue,                ),                child: IgnorePointer(                  ignoring: true,                    child: TabBar(                  controller: _tabController,                  padding: EdgeInsets.all(2),                  dividerHeight: 0,                  unselectedLabelColor: Colors.white,                  // labelColor: Colors.white,                  labelColor: Colors.blue,                  indicator: BoxDecoration(                    borderRadius: BorderRadius.circular(50),                    // color: const Color.fromRGBO(0, 149, 117, 1),                    color: Colors.white,                  ),                  indicatorSize: TabBarIndicatorSize.tab,                  tabs: const [                    Padding(                      padding: EdgeInsets.symmetric(vertical: 8.0),                      child: Center(                        child: Text(                          "Assign Report",                          style: TextStyle(                            fontSize: 14,                            fontFamily: "Proxima",                            fontWeight: FontWeight.bold,                          ),                        ),                      ),                    ),                    Padding(                      padding: EdgeInsets.symmetric(vertical: 8.0),                      child: Center(                        child: Text(                          "Finalize Report",                          style: TextStyle(                            fontSize: 14,                            fontFamily: "Proxima",                            fontWeight: FontWeight.bold,                          ),                        ),                      ),                    ),                  ],                )),              ),            ),            Expanded(              child: TabBarView(                controller: _tabController,                physics: NeverScrollableScrollPhysics(),                children: [                  Padding(                    padding: const EdgeInsets.all(8.0),                    child: Center(                      child: Column(                        crossAxisAlignment: CrossAxisAlignment.start,                        children: [                          const SizedBox(height: 24),                          const Text(                            "Assign To",                            style: TextStyle(fontWeight: FontWeight.bold, fontFamily: "Proxima",),                          ),                          const SizedBox(height: 8),                          Obx(() {                            if (userController.isLoading.value) {                              return Center(child: CircularProgressIndicator());                            }                            return Padding(                              padding: const EdgeInsets.all(8.0),                              child: Column(                                crossAxisAlignment: CrossAxisAlignment.start,                                children: [                                  SizedBox(height: 10),                                  userController.allUsers == null || userController.allUsers!                                      .isEmpty                                      ? Center(child: Text("User Not Found!",                                      style: TextStyle(fontFamily: "Proxima",),))                                      : DropdownButtonFormField<String>(                                    decoration: const InputDecoration(                                      border: OutlineInputBorder(),                                    ),                                    style: TextStyle(fontSize: 16, color:                                    Colors.black, fontFamily: "Proxima",),                                    hint: const Text("Select User"),                                    value: controller.assignTo.value == "" ? null : controller.assignTo.value,                                    items: userController.allUsers!                                        .map((user) => DropdownMenuItem<String>(                                      value: user.id,                                      child: Text(user.name ?? "Unknown"),                                    ))                                        .toList(),                                    onChanged: (value) async {                                      if (value != null) {                                        controller.assignTo.value = value;                                        // final selectedUser = userController.filteredUsers!.firstWhere((user) => user.id == value);                                      }                                    },                                  ),                                ],                              ),                            );                          }),                          const SizedBox(height: 50),                          Row(                            mainAxisAlignment: MainAxisAlignment.spaceBetween,                            children: [                              const Text(                                "Add Signature",                                style: TextStyle(fontWeight: FontWeight.bold, fontFamily: "Proxima",),                              ),                              IconButton(                                onPressed: () {                                  control.clear();                                },                                icon: Icon(Icons.delete),                              ),                            ],                          ),                          const SizedBox(height: 8),                          RepaintBoundary(                            key: _signatureKey,                            child: AspectRatio(                              aspectRatio: 2,                              child: Stack(                                children: <Widget>[                                  ClipRRect(                                    borderRadius: BorderRadius.circular(13),                                    child: Container(                                      constraints: BoxConstraints.expand(),                                      color: Colors.grey.shade300,                                      child: HandSignature(                                        control: control,                                        type: SignatureDrawType.shape,                                      ),                                    ),                                  ),                                  CustomPaint(                                    painter: DebugSignaturePainterCP(                                      control: control,                                      cp: false,                                      cpStart: false,                                      cpEnd: false,                                    ),                                  ),                                ],                              ),                            ),                          ),                          const Spacer(),                          SizedBox(                            width: double.infinity,                            child: ElevatedButton(                              style: ElevatedButton.styleFrom(                                padding: const EdgeInsets.symmetric(                                  vertical: 16,                                ),                                backgroundColor: Colors.blue,                                shape: RoundedRectangleBorder(                                  borderRadius: BorderRadius.circular(12),                                ),                              ),                              onPressed: () async {                                if (_tabController.index < _tabController.length - 1) {                                  _tabController.animateTo(_tabController.index + 1,);                                }                              },                              child: const Text("Submit", style: TextStyle(fontFamily: "Proxima", fontWeight: FontWeight.bold)),                            ),                          ),                        ],                      ),                    ),                  ),                  Padding(                    padding: const EdgeInsets.all(8.0),                    child: Center(                      child: Column(                        crossAxisAlignment: CrossAxisAlignment.start,                        children: [                          const SizedBox(height: 24),                          const Text(                            "Please note: submission is final—no further edits allowed.",                            style: TextStyle(fontWeight: FontWeight.bold, fontFamily: "Proxima",),                          ),                          const SizedBox(height: 100),                          Row(                            mainAxisAlignment: MainAxisAlignment.spaceBetween,                            children: [                              const Text(                                "Add Signature",                                style: TextStyle(fontWeight: FontWeight.bold, fontFamily: "Proxima",),                              ),                              IconButton(                                onPressed: () {                                  control.clear();                                },                                icon: Icon(Icons.delete),                              ),                            ],                          ),                          const SizedBox(height: 8),                          AspectRatio(                            aspectRatio: 2,                            child: Stack(                              children: <Widget>[                                ClipRRect(                                  borderRadius: BorderRadius.circular(13),                                  child: Container(                                    constraints: BoxConstraints.expand(),                                    color: Colors.grey.shade300,                                    child: HandSignature(                                      control: control,                                      type: SignatureDrawType.shape,                                    ),                                  ),                                ),                                CustomPaint(                                  painter: DebugSignaturePainterCP(                                    control: control,                                    cp: false,                                    cpStart: false,                                    cpEnd: false,                                  ),                                ),                              ],                            ),                          ),                          const Spacer(),                          Row(                            children: [                              Expanded(                                child: ElevatedButton(                                  style: ElevatedButton.styleFrom(                                    padding: const EdgeInsets.symmetric(                                      vertical: 16,                                    ),                                    backgroundColor: Colors.blue,                                    shape: RoundedRectangleBorder(                                      borderRadius: BorderRadius.circular(12),                                    ),                                  ),                                  onPressed: () {                                    // Submit logic                                    log(                                      "controller.editIndex==> ${controller.editIndex.value}",                                    );                                    final partnerLocal = PartnerLocalModelClass(                                      partnerID:                                          controller.partnerIndex.value,                                      // assetID: controller.firstAssetsIDController.text,                                      assetID: controller.assetIdText.value,                                      reportName: controller.reportName.value,                                      productName:                                          controller                                              .productNameController                                              .text,                                      productImageFile:                                          controller.productImage.value,                                      productType:                                          controller.productType.value,                                      systemGeneratedAssetId:                                          controller.assetsIDController.text,                                      systemGeneratedAssetName:                                          controller                                              .assetsNameController                                              .text,                                      systemGeneratedAssetCode:                                          controller                                              .assetsCodeController                                              .text,                                      systemGeneratedAssetType:                                          controller                                              .assetsTypeController                                              .text,                                      systemGeneratedPartnerId:                                          controller.partnerIDController.text,                                      systemGeneratedPartnerName:                                          controller                                              .productNameController                                              .text,                                      systemGeneratedPartnerCategory:                                          controller                                              .partnerCategoryController                                              .text,                                      systemGeneratedPartnerPinCode:                                          controller                                              .partnerPinCodeController                                              .text,                                      assignTo: controller.assignTo.value,                                    );                                    final employeeLocal = EmployeeLocalModelClass(                                      employeeID:                                          controller.employeeIndex.value,                                      // assetID: controller.firstAssetsIDController.text,                                      assetID: controller.assetIdText.value,                                      reportName: controller.reportName.value,                                      productName:                                          controller                                              .productNameController                                              .text,                                      productImageFile:                                          controller.productImage.value,                                      productType:                                          controller.productType.value,                                      systemGeneratedAssetId:                                          controller.assetsIDController.text,                                      systemGeneratedAssetName:                                          controller                                              .assetsNameController                                              .text,                                      systemGeneratedAssetCode:                                          controller                                              .assetsCodeController                                              .text,                                      systemGeneratedAssetType:                                          controller                                              .assetsTypeController                                              .text,                                      systemGeneratedPartnerId:                                          controller.partnerIDController.text,                                      systemGeneratedPartnerName:                                          controller                                              .productNameController                                              .text,                                      systemGeneratedPartnerCategory:                                          controller                                              .partnerCategoryController                                              .text,                                      systemGeneratedPartnerPinCode:                                          controller                                              .partnerPinCodeController                                              .text,                                      assignTo: controller.assignTo.value,                                    );                                    if (controller.editIndex.value == null) {                                      log("controller.employeeIndex.value=====>${controller.employeeIndex.value}",);                                      if (controller.employeeIndex.value != "") {                                        employeeLocalDbController.addLocalEmployeeDb(employeeLocal,);                                        Get.snackbar("Success", "Add Employee Successfully", backgroundColor: Colors.white, colorText: AppColor.appBarColor,);                                      } else {                                        localDbController.addLocalPartnerDb(partnerLocal,);                                        Get.snackbar("Success", "Add Partner Successfully", backgroundColor: Colors.white, colorText: AppColor.appBarColor,);                                      }                                    } else {                                      int? maybeInt = controller.editIndex.value;                                      if (controller.employeeIndex.value != "") {                                        employeeLocalDbController.updateLocalEmployeeDb(maybeInt!, employeeLocal,);                                        Get.snackbar("Success", "Update Employee Successfully", backgroundColor: Colors.white, colorText: AppColor.appBarColor,);                                      } else {                                        localDbController.updateLocalPartnerDb(maybeInt!, partnerLocal,);                                        Get.snackbar("Success", "Update Partner Successfully", backgroundColor: Colors.white, colorText: AppColor.appBarColor,);                                      }                                    }                                  },                                  child: const Text("Save as Draft", style: TextStyle(fontFamily: "Proxima", fontWeight: FontWeight.bold)),                                ),                              ),                              SizedBox(width: 20),                              Expanded(                                child: ElevatedButton(                                  style: ElevatedButton.styleFrom(                                    padding: const EdgeInsets.symmetric(                                      vertical: 16,                                    ),                                    backgroundColor: Colors.blue,                                    shape: RoundedRectangleBorder(                                      borderRadius: BorderRadius.circular(12),                                    ),                                  ),                                  onPressed: () {                                    // Submit logic                                    // log("user_signature===> ${box.read('user_signature')}",);                                                                        controller.createReport();                                    // Get.back();                                  },                                  child: controller.isLoading.value ? Center(child: CircularProgressIndicator(color: Colors.white,),) :                                  Text("Submit", style: TextStyle(fontFamily: "Proxima", fontWeight: FontWeight.bold),),                                ),                              ),                            ],                          ),                          // if (_signaturePreview != null)                          //   Padding(                          //     padding: const EdgeInsets.all(8.0),                          //     child: Image.memory(                          //       _signaturePreview!,                          //       width: 300,                          //       height: 150,                          //       fit: BoxFit.contain,                          //     ),                          //   ),                          // box.read('user_signature') == "" ? SizedBox.shrink() : Image.memory(base64Decode(box.read('user_signature')))                        ],                      ),                    ),                  ),                ],              ),            ),          ],        ),      ),    );  }}